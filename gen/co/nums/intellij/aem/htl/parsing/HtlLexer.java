/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package co.nums.intellij.aem.htl.parsing;

import co.nums.intellij.aem.htl.psi.HtlTokenTypes;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>htl.flex</tt>
 */
class HtlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int EXPRESSION = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14672 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\3\21\1\23\1\24\1\25\1\21\14\26\1\27\50\26\1\30\2\26\1\31\1\32"+
    "\1\33\1\34\25\26\1\35\20\21\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1"+
    "\47\1\50\1\21\1\51\1\52\1\53\1\54\1\55\1\56\2\21\1\26\1\57\1\60\5\21\2\26"+
    "\1\61\7\21\1\26\1\62\20\21\1\26\1\63\1\21\1\64\40\21\1\65\5\21\1\66\13\21"+
    "\1\67\1\70\10\21\1\71\2\21\1\72\1\73\7\21\123\26\1\74\7\26\1\75\1\76\12\26"+
    "\1\77\24\21\1\26\1\100\u0702\21");

  /* The ZZ_CMAP_Y table has 4160 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\2\0\1\2\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14\5\0\1\15\1\16"+
    "\1\15\2\7\1\17\3\7\1\17\71\7\1\20\1\7\1\21\1\0\1\22\1\23\12\0\1\16\5\0\1\24"+
    "\1\25\1\26\1\27\2\7\1\30\11\7\1\31\21\7\1\21\1\32\24\7\1\33\3\7\1\17\1\34"+
    "\1\33\4\7\5\0\1\7\1\31\1\35\1\0\3\7\2\36\3\0\1\7\1\36\7\7\1\33\1\37\1\40\14"+
    "\7\1\41\1\22\1\33\1\42\1\37\1\43\2\0\6\7\1\0\1\44\14\7\1\21\1\0\1\37\1\45"+
    "\3\7\1\36\1\46\1\15\3\7\1\32\1\7\1\22\2\0\3\7\1\47\10\0\2\7\1\22\5\0\1\50"+
    "\1\21\11\7\1\41\1\7\1\24\1\42\1\7\1\51\1\37\1\33\1\7\1\41\1\52\1\53\2\7\1"+
    "\54\1\55\1\56\1\52\1\57\1\60\1\61\1\51\1\37\1\21\1\0\1\62\1\63\1\53\2\7\1"+
    "\54\1\64\1\20\1\63\1\65\1\34\1\66\1\67\1\37\1\70\1\0\1\62\1\31\1\30\2\7\1"+
    "\54\1\71\1\56\1\31\1\72\1\47\1\0\1\51\1\37\1\0\1\34\1\62\1\52\1\53\2\7\1\54"+
    "\1\71\1\56\1\52\1\65\1\73\1\61\1\51\1\37\1\34\1\0\1\74\1\75\1\76\1\77\1\100"+
    "\1\75\1\7\1\20\1\75\1\101\1\102\1\0\1\67\1\37\2\0\1\41\1\24\1\54\2\7\1\54"+
    "\1\7\1\56\1\24\1\101\1\103\1\36\1\51\1\37\2\0\1\62\1\24\1\54\2\7\1\54\1\41"+
    "\1\56\1\24\1\101\1\103\1\26\1\51\1\37\1\104\1\0\1\62\1\24\1\54\4\7\1\105\1"+
    "\24\1\106\2\60\1\51\1\37\1\0\1\32\1\74\1\7\1\17\1\32\2\7\1\30\1\107\1\17\1"+
    "\60\1\110\1\7\1\67\1\37\1\111\1\0\1\33\6\7\1\36\1\17\1\16\1\37\1\112\4\0\1"+
    "\113\1\114\1\115\1\33\1\116\1\74\1\7\1\117\1\110\1\16\1\37\1\120\4\0\1\47"+
    "\3\0\1\37\1\112\2\0\1\7\1\33\3\7\1\22\1\33\1\7\1\21\2\7\1\33\3\7\1\22\10\0"+
    "\6\7\1\17\1\53\1\37\1\112\2\7\1\105\1\121\2\7\1\17\1\26\1\37\1\122\4\7\1\31"+
    "\1\16\5\7\1\123\51\7\1\76\1\17\1\76\5\7\1\76\4\7\1\76\1\17\1\76\1\7\1\17\7"+
    "\7\1\76\10\7\1\63\4\0\2\7\2\0\12\7\2\70\1\33\114\7\1\52\2\7\1\33\2\7\1\36"+
    "\11\7\1\75\1\7\1\47\1\7\1\24\1\124\1\0\2\7\1\124\1\0\2\7\1\124\1\0\1\7\1\24"+
    "\1\125\1\0\6\7\1\126\2\7\1\47\1\60\1\127\1\37\1\112\4\0\1\37\1\112\13\7\1"+
    "\0\5\7\1\36\10\7\1\70\1\0\3\7\1\17\1\7\1\124\1\7\1\47\1\67\1\37\3\7\1\70\1"+
    "\22\1\0\5\7\1\124\3\7\1\21\1\37\1\112\4\0\3\7\1\124\7\7\1\17\1\33\1\7\1\22"+
    "\1\0\1\37\1\112\1\37\1\112\1\60\13\0\6\7\1\41\1\7\1\41\1\124\1\37\1\112\4"+
    "\0\5\7\1\130\1\37\1\45\4\7\1\31\1\7\1\21\1\0\6\7\1\70\1\0\1\37\1\131\1\37"+
    "\1\45\3\7\1\70\15\0\1\132\1\133\1\0\30\7\4\0\1\60\1\7\1\22\1\0\42\7\2\70\4"+
    "\7\2\70\1\7\1\134\3\7\1\70\6\7\1\24\1\110\1\135\1\22\1\126\1\124\1\7\1\22"+
    "\1\135\1\22\16\0\1\34\1\60\2\0\1\7\1\22\14\0\1\136\1\32\1\107\1\137\1\23\1"+
    "\140\1\7\1\130\1\44\1\141\2\0\5\7\1\47\144\0\1\73\6\7\1\21\42\0\5\7\1\17\5"+
    "\7\1\17\20\7\1\22\1\142\1\111\1\0\4\7\1\31\1\16\7\7\1\60\2\0\2\7\1\17\1\0"+
    "\10\17\4\7\5\0\1\60\72\0\1\44\3\0\1\33\1\21\1\137\1\22\1\33\11\7\1\17\1\44"+
    "\1\33\12\7\1\123\1\44\4\7\1\70\1\33\12\7\1\17\2\0\3\7\1\36\6\0\170\7\1\70"+
    "\11\0\72\7\1\70\5\0\21\7\1\22\10\0\5\7\1\70\41\7\1\22\2\7\1\37\1\143\2\0\5"+
    "\7\1\17\1\115\1\144\16\7\4\0\1\60\1\7\1\32\14\7\1\53\3\7\1\70\1\7\7\0\1\60"+
    "\1\7\1\145\1\123\3\7\3\0\6\7\1\124\1\0\10\7\1\124\1\0\1\37\1\112\2\0\1\32"+
    "\1\146\1\37\1\45\3\7\1\36\4\7\1\36\1\0\3\7\1\22\6\7\1\123\1\7\1\0\1\60\1\37"+
    "\1\112\1\24\1\7\1\37\1\147\6\7\1\17\1\0\1\7\1\70\1\37\1\112\2\7\1\17\1\150"+
    "\7\7\1\17\1\151\2\0\1\152\2\7\1\153\1\0\3\154\1\0\2\17\5\7\1\123\1\70\1\0"+
    "\17\7\1\36\1\37\1\112\64\7\1\124\1\0\2\7\1\17\1\50\5\7\1\124\40\0\55\7\1\70"+
    "\15\7\1\21\4\0\1\17\1\0\1\50\1\44\1\7\1\54\1\17\1\110\1\155\15\7\1\21\3\0"+
    "\1\50\54\7\1\70\2\0\10\7\1\32\6\7\5\0\1\7\1\124\16\0\1\24\20\7\1\22\2\0\1"+
    "\37\1\112\1\33\2\7\1\36\1\33\2\7\1\36\1\73\12\7\1\17\3\32\1\156\4\0\1\7\1"+
    "\41\2\7\1\17\2\7\1\157\1\7\1\70\1\7\1\70\4\0\17\7\1\36\10\0\6\7\1\22\41\0"+
    "\3\7\1\22\6\7\1\47\5\0\4\7\2\0\3\7\1\36\5\7\1\36\3\7\1\70\4\7\1\124\1\7\1"+
    "\137\5\0\23\7\1\70\1\37\1\112\12\0\5\7\1\0\6\7\1\124\23\0\46\7\1\17\1\0\2"+
    "\7\1\70\1\0\1\7\23\0\1\70\1\54\4\7\1\31\1\160\2\7\1\70\1\0\2\7\1\17\1\0\3"+
    "\7\1\17\10\0\2\7\1\161\1\0\2\7\1\70\1\0\3\7\1\21\10\0\7\7\1\73\10\0\1\133"+
    "\1\115\1\41\1\33\2\7\1\124\5\0\3\7\1\22\3\7\1\22\4\0\1\7\1\33\2\7\1\22\3\0"+
    "\6\7\1\70\1\0\2\7\1\70\1\0\2\7\1\36\1\0\2\7\1\21\15\0\11\7\1\47\6\0\6\7\1"+
    "\36\1\0\6\7\1\36\41\0\10\7\1\70\3\0\1\67\1\37\2\0\1\32\6\7\1\47\2\0\3\7\1"+
    "\47\1\37\1\112\6\7\1\162\1\37\2\0\4\7\1\163\1\0\10\7\1\164\1\0\1\37\1\165"+
    "\4\0\2\7\1\30\3\7\1\52\11\0\1\17\1\140\1\7\1\31\1\7\1\47\7\7\1\47\1\37\1\112"+
    "\1\41\1\52\1\53\2\7\1\54\1\71\1\56\1\52\1\65\1\102\1\44\1\124\43\0\10\7\1"+
    "\166\1\0\1\37\1\112\24\0\6\7\1\70\1\17\3\0\1\70\4\0\7\7\1\17\1\167\1\0\1\37"+
    "\1\112\4\0\6\7\1\70\1\0\1\37\1\112\6\0\3\7\1\56\1\7\1\36\1\37\1\112\54\0\10"+
    "\7\1\37\1\112\1\0\1\60\70\0\7\7\1\47\40\0\63\7\1\21\14\0\15\7\1\17\2\0\30"+
    "\7\1\124\27\0\5\7\1\17\72\0\10\7\1\17\67\0\7\7\1\47\3\7\1\17\1\37\1\112\14"+
    "\0\3\7\1\70\2\0\6\7\1\17\1\0\1\124\1\0\1\37\1\112\1\50\2\7\1\44\2\7\56\0\10"+
    "\7\1\22\1\0\5\7\1\17\2\0\1\50\1\7\14\0\1\21\77\0\15\7\1\36\1\7\1\22\1\7\1"+
    "\47\1\7\1\141\54\0\12\7\1\24\10\7\1\24\1\170\1\132\1\7\1\171\1\41\7\7\1\31"+
    "\1\105\2\24\3\7\1\172\1\110\1\32\1\54\51\7\1\70\3\7\1\54\2\7\1\123\3\7\1\123"+
    "\2\7\1\24\3\7\1\24\2\7\1\17\3\7\1\17\3\7\1\54\3\7\1\54\2\7\1\123\1\51\6\37"+
    "\30\7\1\22\47\0\1\41\3\7\1\113\1\33\1\123\1\173\1\136\1\174\1\113\1\134\1"+
    "\113\2\123\1\66\1\7\1\30\1\7\1\124\1\62\1\30\1\7\1\124\116\0\3\7\1\21\3\7"+
    "\1\21\3\7\1\21\16\0\32\7\1\17\5\0\106\7\1\22\1\0\33\7\1\70\120\7\1\21\53\0"+
    "\3\7\1\70\74\0");

  /* The ZZ_CMAP_A table has 1000 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\1\0\1\1\1\4\2\0\1\44\1\42\1\11\1\0\1\23\1\0\1\46\1\2\1\35\1"+
    "\36\1\0\1\17\1\41\1\17\1\15\1\5\1\12\11\13\1\22\1\0\1\51\1\50\1\52\1\45\1"+
    "\43\4\7\1\16\1\7\14\20\1\37\1\3\1\40\1\0\1\20\1\0\1\32\1\10\2\7\1\30\1\31"+
    "\5\20\1\33\1\20\1\21\3\20\1\27\1\34\1\26\1\6\5\20\1\24\1\47\1\25\4\0\1\20"+
    "\12\0\1\20\2\0\7\20\1\0\2\20\4\0\4\20\6\0\5\20\7\0\1\20\1\0\1\20\1\0\5\20"+
    "\1\0\2\20\2\0\4\20\1\0\1\20\6\0\1\20\1\0\3\20\1\0\1\20\1\0\4\20\1\0\13\20"+
    "\1\0\1\20\2\0\6\20\1\0\7\20\1\0\1\20\7\0\2\20\1\0\2\20\1\0\4\20\5\0\12\14"+
    "\4\0\6\20\1\0\4\20\4\0\3\20\2\14\3\20\2\0\1\20\5\0\3\20\2\14\6\20\4\0\2\20"+
    "\2\0\1\20\12\0\11\20\2\0\2\14\5\20\2\0\2\20\2\0\6\20\1\0\7\20\1\0\1\20\3\0"+
    "\4\20\3\0\4\20\2\0\2\20\1\0\1\20\10\0\1\20\4\0\2\20\1\0\1\20\1\0\3\20\1\0"+
    "\6\20\4\0\2\20\1\0\2\20\1\0\2\20\1\0\1\20\2\0\2\20\4\0\4\20\1\0\1\20\7\0\2"+
    "\14\6\20\2\0\1\20\1\0\2\20\1\0\5\20\1\0\2\20\11\0\2\20\2\0\2\20\1\0\6\20\3"+
    "\0\3\20\1\0\4\20\3\0\2\20\1\0\1\20\1\0\2\20\3\0\2\20\3\0\1\20\1\0\3\20\3\0"+
    "\1\20\6\0\1\20\5\0\2\20\2\0\2\20\5\0\3\20\2\0\4\20\1\0\3\20\1\0\1\20\1\0\4"+
    "\20\1\0\1\20\2\0\5\20\1\0\1\20\3\0\2\20\4\0\2\14\7\0\2\20\1\0\1\20\2\0\2\20"+
    "\1\0\1\20\2\0\1\20\6\0\4\20\1\0\3\20\1\0\1\20\1\0\3\20\1\0\3\20\2\0\2\14\2"+
    "\0\5\20\5\0\2\20\2\14\2\0\2\20\2\0\3\20\1\0\10\20\4\0\1\20\1\0\2\20\4\0\4"+
    "\20\2\0\2\20\4\0\1\20\3\0\2\20\2\0\4\20\2\14\3\0\3\20\1\0\4\20\1\0\6\20\1"+
    "\0\2\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0\1\20\2\0\3\20\1\0\2\20\2\0\1\20\4\0"+
    "\1\20\1\0\5\20\2\0\1\20\1\0\4\20\1\0\3\20\4\0\1\20\4\0\4\20\1\0\2\14\2\20"+
    "\4\0\4\20\3\0\3\20\1\0\3\20\1\0\1\20\3\0\1\20\1\0\1\20\2\0\2\14\5\20\3\0\1"+
    "\20\3\0\3\20\1\0\1\20\10\0\3\20\4\0\4\20\3\0\6\20\1\0\2\20\1\0\2\20\1\0\2"+
    "\20\2\0\3\20\3\0\3\20\1\0\2\20\1\0\2\20\3\0\1\20\2\0\4\20\1\0\2\20\2\0\3\20"+
    "\3\0\2\14\3\20\3\0\1\20\2\0\4\20\3\0\2\14\1\20\1\0\1\20\3\0\2\20\2\0\2\20"+
    "\1\0\2\20\3\0\1\20\5\0\1\20\2\0\2\20\1\0\2\20\1\0\1\20\1\0\5\20\1\0\4\20\2"+
    "\0\1\20\1\0\1\20\5\0\1\20\1\0\1\20\1\0\3\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\1\1\2\1\3\1\4\1\5\1\6"+
    "\2\7\1\10\1\2\1\11\2\5\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\3\2\2\1\21\1\22"+
    "\1\23\1\24\1\4\2\0\1\6\3\0\1\7\1\25"+
    "\1\26\2\5\1\27\2\0\1\30\1\31\1\32\1\33"+
    "\1\34\2\0\1\25\1\0\2\5\1\35\1\36\2\0"+
    "\1\37\1\5\2\0\1\40\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u01ae\0\u01d9\0\201\0\u0204\0\u022f\0\201"+
    "\0\201\0\201\0\201\0\201\0\u025a\0\201\0\u0285\0\u02b0"+
    "\0\u02db\0\u0306\0\u0331\0\u035c\0\201\0\201\0\u0387\0\u03b2"+
    "\0\201\0\u0158\0\u01ae\0\u03dd\0\u0408\0\u0433\0\201\0\u045e"+
    "\0\u0489\0\201\0\u04b4\0\u04df\0\201\0\201\0\201\0\201"+
    "\0\201\0\u050a\0\u0535\0\u0560\0\u0560\0\u058b\0\u05b6\0\201"+
    "\0\201\0\u05e1\0\u060c\0\u0102\0\u0637\0\u0662\0\u068d\0\u0102"+
    "\0\u06b8\0\u06e3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\23\1\1\3\27\1\1\4\1\5\1\6\1\4\1\5"+
    "\1\4\3\7\1\10\1\11\1\12\1\4\1\13\1\7"+
    "\1\4\2\7\1\4\1\14\1\4\1\15\1\16\2\7"+
    "\1\17\3\7\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\4\1\30\1\31\1\32\1\33\1\34"+
    "\23\1\1\3\1\35\26\1\54\0\1\5\2\0\1\5"+
    "\37\0\1\5\6\0\2\6\1\36\1\37\1\0\46\6"+
    "\6\0\3\7\1\0\3\7\1\0\1\7\1\0\3\7"+
    "\3\0\7\7\16\0\3\10\1\40\1\0\4\10\1\41"+
    "\41\10\12\0\2\42\1\0\1\43\1\44\11\0\1\44"+
    "\34\0\2\12\1\45\1\43\1\44\11\0\1\44\34\0"+
    "\2\46\63\0\1\47\34\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\3\7\3\0\1\7\1\50\5\7\24\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\3\7\3\0"+
    "\4\7\1\51\2\7\66\0\1\52\3\0\1\5\2\0"+
    "\1\5\15\0\1\53\21\0\1\5\1\54\53\0\1\55"+
    "\53\0\1\56\53\0\1\57\52\0\1\60\52\0\1\61"+
    "\4\0\2\6\1\0\1\6\1\62\1\0\1\6\10\0"+
    "\1\6\4\0\2\6\1\0\1\6\24\0\1\10\1\0"+
    "\1\10\1\63\1\0\2\10\7\0\1\10\4\0\2\10"+
    "\1\0\1\10\33\0\2\64\3\0\1\65\45\0\3\45"+
    "\50\0\2\46\2\0\1\44\11\0\1\44\30\0\1\66"+
    "\2\7\1\0\3\7\1\0\1\7\1\0\3\7\3\0"+
    "\7\7\24\0\3\7\1\0\3\7\1\0\1\7\1\0"+
    "\3\7\3\0\5\7\1\67\1\7\62\0\1\70\52\0"+
    "\1\71\15\0\2\72\1\0\2\72\2\0\1\72\11\0"+
    "\3\72\27\0\2\73\1\0\2\73\2\0\1\73\11\0"+
    "\3\73\32\0\2\64\45\0\3\7\1\0\3\7\1\0"+
    "\1\7\1\0\3\7\3\0\2\7\1\74\4\7\24\0"+
    "\3\7\1\0\3\7\1\0\1\7\1\0\3\7\3\0"+
    "\6\7\1\75\25\0\2\76\1\0\2\76\2\0\1\76"+
    "\11\0\3\76\27\0\2\77\1\0\2\77\2\0\1\77"+
    "\11\0\3\77\26\0\3\7\1\0\3\7\1\0\1\7"+
    "\1\0\3\7\3\0\2\7\1\100\4\7\25\0\2\101"+
    "\1\0\2\101\2\0\1\101\11\0\3\101\27\0\2\102"+
    "\1\0\2\102\2\0\1\102\11\0\3\102\27\0\2\6"+
    "\1\0\2\6\2\0\1\6\11\0\3\6\27\0\2\10"+
    "\1\0\2\10\2\0\1\10\11\0\3\10\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1806];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\0\1\1\1\11\10\1\1\11\2\1\5\11"+
    "\1\1\1\11\6\1\2\11\2\0\1\11\3\0\2\1"+
    "\1\11\2\1\1\11\2\0\5\11\2\0\1\1\1\0"+
    "\2\1\2\11\2\0\2\1\2\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  HtlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return HtlTokenTypes.HTML_FRAGMENT;
            }
          case 33: break;
          case 2: 
            { return TokenType.BAD_CHARACTER;
            }
          case 34: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 35: break;
          case 4: 
            { return HtlTokenTypes.SINGLE_QUOTED_STRING;
            }
          case 36: break;
          case 5: 
            { return HtlTokenTypes.IDENTIFIER;
            }
          case 37: break;
          case 6: 
            { return HtlTokenTypes.DOUBLE_QUOTED_STRING;
            }
          case 38: break;
          case 7: 
            { return HtlTokenTypes.INTEGER_NUMBER;
            }
          case 39: break;
          case 8: 
            { return HtlTokenTypes.DOT;
            }
          case 40: break;
          case 9: 
            { yybegin(YYINITIAL); return HtlTokenTypes.EXPR_END;
            }
          case 41: break;
          case 10: 
            { return HtlTokenTypes.LEFT_PARENTH;
            }
          case 42: break;
          case 11: 
            { return HtlTokenTypes.RIGHT_PARENTH;
            }
          case 43: break;
          case 12: 
            { return HtlTokenTypes.LEFT_BRACKET;
            }
          case 44: break;
          case 13: 
            { return HtlTokenTypes.RIGHT_BRACKET;
            }
          case 45: break;
          case 14: 
            { return HtlTokenTypes.COMMA;
            }
          case 46: break;
          case 15: 
            { return HtlTokenTypes.NOT;
            }
          case 47: break;
          case 16: 
            { return HtlTokenTypes.OPTIONS_SEPARATOR;
            }
          case 48: break;
          case 17: 
            { return HtlTokenTypes.ASSIGN;
            }
          case 49: break;
          case 18: 
            { return HtlTokenTypes.LT;
            }
          case 50: break;
          case 19: 
            { return HtlTokenTypes.GT;
            }
          case 51: break;
          case 20: 
            { if (yylength() >= 3 && yytext().toString().substring(yylength() - 3, yylength()).equals("\\${")) {
                                  // escaped expression
                                  return HtlTokenTypes.HTML_FRAGMENT;
                                } else {
                                  // matched expression
                                  yypushback(2); // get back before ${
                                  yybegin(EXPRESSION);
                                  if (yylength() > 0) {
                                    return HtlTokenTypes.HTML_FRAGMENT;
                                  }
                                }
            }
          case 52: break;
          case 21: 
            { return HtlTokenTypes.FLOAT_NUMBER;
            }
          case 53: break;
          case 22: 
            { return HtlTokenTypes.EXPR_START;
            }
          case 54: break;
          case 23: 
            { return HtlTokenTypes.NEQ;
            }
          case 55: break;
          case 24: 
            { return HtlTokenTypes.AND;
            }
          case 56: break;
          case 25: 
            { return HtlTokenTypes.OR;
            }
          case 57: break;
          case 26: 
            { return HtlTokenTypes.EQ;
            }
          case 58: break;
          case 27: 
            { return HtlTokenTypes.LEQ;
            }
          case 59: break;
          case 28: 
            { return HtlTokenTypes.GEQ;
            }
          case 60: break;
          case 29: 
            { return HtlTokenTypes.TERNARY_BRANCHES_OP;
            }
          case 61: break;
          case 30: 
            { return HtlTokenTypes.TERNARY_QUESTION_OP;
            }
          case 62: break;
          case 31: 
            { return HtlTokenTypes.BOOLEAN_TRUE;
            }
          case 63: break;
          case 32: 
            { return HtlTokenTypes.BOOLEAN_FALSE;
            }
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
