package co.nums.intellij.aem.errorreports

import org.eclipse.egit.github.core.*
import org.eclipse.egit.github.core.client.GitHubClient
import org.eclipse.egit.github.core.service.IssueService

const val AUTO_GENERATED_LABEL_NAME = "auto-generated"
const val FIXED_PREFIX = "fixed:"

interface GitHubIssueService {

    fun findAutoGeneratedIssueByTitle(title: String): Issue?

    fun submitIssue(issue: Issue): Issue

    fun addComment(issueNumber: Int, comment: String): Comment

}

class GitHubIssueServiceImpl : GitHubIssueService {

    private val issueService: IssueService
    private val repository = RepositoryId("aem-intellij-plugin-error-reporter", "auto-generated-issues-storage")

    init {
        val client = GitHubClient()
        client.setOAuth2Token(GitHubAccessTokenProvider.token)
        issueService = IssueService(client)
    }

    override fun findAutoGeneratedIssueByTitle(title: String): Issue? {
        val filterData = mapOf(
                IssueService.FILTER_LABELS to AUTO_GENERATED_LABEL_NAME,
                IssueService.FIELD_TITLE to title,
                IssueService.FIELD_SORT to IssueService.SORT_CREATED,
                IssueService.FIELD_DIRECTION to IssueService.DIRECTION_DESCENDING
        )
        return issueService.getIssues(repository, filterData).firstOrNull()
    }

    override fun submitIssue(issue: Issue): Issue =
            issueService.createIssue(repository, issue)

    override fun addComment(issueNumber: Int, comment: String): Comment =
            issueService.createComment(repository, issueNumber, comment)

}
