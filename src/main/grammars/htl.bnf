{
  parserClass="co.nums.intellij.aem.htl.parser.HtlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Htl"
  psiImplClassSuffix="Impl"
  psiPackage="co.nums.intellij.aem.htl.psi"
  psiImplPackage="co.nums.intellij.aem.htl.psi.impl"

  elementTypeHolderClass="co.nums.intellij.aem.htl.psi.HtlTypes"
  elementTypeClass="co.nums.intellij.aem.htl.psi.HtlElementType"
  tokenTypeClass="co.nums.intellij.aem.htl.psi.HtlTokenType"

  tokens = [
    HTML_FRAGMENT='regexp:(?:(?!\$\{).)*'
    ESC_EXPR='regexp:\\\$\{.*}'

    EXPR_START='${'
    EXPR_END='}'

    BOOLEAN_TRUE='true'
    BOOLEAN_FALSE='false'

    DOT='.';
    COMMA=',';
    OPTIONS_SEPARATOR='@';

    LEFT_PARENTH='(';
    RIGHT_PARENTH=')';
    LEFT_BRACKET='[';
    RIGHT_BRACKET=']';

    ASSIGN='=';
    AND='&&';
    OR='||';
    NOT='!';
    TERNARY_QUESTION_OP='?';
    TERNARY_BRANCHES_OP=' : ';

    LT='<';
    LEQ='<=';
    GEQ='>=';
    GT='>';
    EQ='==';
    NEQ='!=';

    IDENTIFIER='regexp:[\p{Alpha}_][\p{Alnum}_:]*'
    INTEGER_NUMBER='regexp:0|[1-9]\d*'
    FLOAT_NUMBER='regexp:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+'
    DOUBLE_QUOTED_STRING='regexp:"([^\\"\r\n]|\\([\\"/bfnrt]|u[a-fA-F0-9]{4}))*"'
    SINGLE_QUOTED_STRING="regexp:'([^\\'\r\n]|\\([\\'/bfnrt]|u[a-fA-F0-9]{4}))*'"

    space='regexp:\s+'
  ]
}

interpolation ::= (expression | text_fragment)*

private text_fragment ::= HTML_FRAGMENT+ | ESC_EXPR+

expression ::= '${' expr_node? ['@' option_list] '}' {
  pin=1
  recoverWhile=expression_recover
}
private expression_recover ::= !('${' | text_fragment)

option_list ::= option (',' option)*

option ::= IDENTIFIER ['=' expr_node]

expr_node ::= binary_operation ['?' binary_operation ' : ' binary_operation]

binary_operation ::= comparison_term (logical_operator comparison_term)*

comparison_term ::= factor [comparison_operator factor]

logical_operator ::= '&&'
                   | '||'

comparison_operator ::= '>'
                      | '<'
                      | '>='
                      | '<='
                      | '=='
                      | '!='

private factor ::= '!'? term

private term ::= simple property_access*

property_access ::= bracket_property_access | dot_property_access

bracket_property_access ::= '[' expr_node ']'

dot_property_access ::= '.' field

private field ::= IDENTIFIER

private simple ::= atom
                 | '(' expr_node ')'
                 | '[' value_list ']'
                 | '[' ']'

value_list ::= expr_node (',' expr_node)*

private atom ::= variable
       | INTEGER_NUMBER
       | FLOAT_NUMBER
       | string_literal
       | boolean_constant

variable ::= IDENTIFIER

string_literal ::= SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING

private boolean_constant ::= BOOLEAN_TRUE | BOOLEAN_FALSE
