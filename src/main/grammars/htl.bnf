{
  parserClass="co.nums.intellij.aem.htl.parser.HtlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Htl"
  psiImplClassSuffix="Impl"
  psiPackage="co.nums.intellij.aem.htl.psi"
  psiImplPackage="co.nums.intellij.aem.htl.psi.impl"

  elementTypeHolderClass="co.nums.intellij.aem.htl.psi.HtlTypes"
  elementTypeClass="co.nums.intellij.aem.htl.psi.HtlElementType"
  tokenTypeClass="co.nums.intellij.aem.htl.psi.HtlTokenType"

  tokens = [
    OUTER_TEXT='regexp:(?:(?!\$\{).)*'

    EXPR_START='${'
    EXPR_END='}'

    DOT='.';
    COMMA=',';
    OPTIONS_SEPARATOR='@';

    LEFT_PARENTH='(';
    RIGHT_PARENTH=')';
    LEFT_BRACKET='[';
    RIGHT_BRACKET=']';

    ASSIGN='=';
    AND='&&';
    OR='||';
    NOT='!';
    TERNARY_QUESTION_OP='?';
    TERNARY_BRANCHES_OP=':';

    LT='<';
    LEQ='<=';
    GEQ='>=';
    GT='>';
    EQ='==';
    NEQ='!=';

    IDENTIFIER='regexp:[\p{Alpha}_][\p{Alnum}_:]*'
    INTEGER_NUMBER='regexp:0|[1-9]\d*'
    FLOAT_NUMBER='regexp:[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+'
    BOOLEAN_LITERAL='regexp:true|false'

    SINGLE_QUOTE="'"
    DOUBLE_QUOTE='"'
    STRING_CONTENT="regexp:([^\\']|\\([\\'\"/bfnrt]|u[a-fA-F0-9]{4}))*"

    COMMENT_START='<!--/*'
    COMMENT_END='*/-->'
    COMMENT_CONTENT='regexp:.*'
  ]

  extends("bracket_property_access|dot_property_access")=property_access
  mixin("template_comment")="co.nums.intellij.aem.htl.psi.mixins.HtlCommentMixin"
}

interpolation ::= (expression | template_comment | outer_text)*

template_comment ::= "<!--/*" COMMENT_CONTENT? "*/-->"

private outer_text ::= OUTER_TEXT+

expression ::= '${' expr_node? ['@' option_list] '}' {
  pin=1
  recoverWhile=expression_recover
}
private expression_recover ::= !('${' | outer_text | "<!--/*")

option_list ::= option (',' option)*

option ::= option_name ['=' option_value]

option_name ::= IDENTIFIER

option_value ::= expr_node

expr_node ::= ternary_operator | logical_operation

ternary_operator ::= logical_operation '?' logical_operation ':' logical_operation

logical_operation ::= logical_operand (logical_operator logical_operand)*

logical_operand ::= comparison | term

comparison ::= factor comparison_operator factor

factor ::= term

private term ::= '!'? simple property_access*

logical_operator ::= '&&'
                   | '||'

comparison_operator ::= '>'
                      | '<'
                      | '>='
                      | '<='
                      | '=='
                      | '!='

property_access ::= bracket_property_access | dot_property_access

bracket_property_access ::= '[' expr_node ']'

dot_property_access ::= '.' IDENTIFIER

simple ::= literal
         | variable
         | array
         | '(' expr_node ')'

array ::= '[' value_list? ']'

private value_list ::= expr_node (',' expr_node)*

literal ::= BOOLEAN_LITERAL
          | INTEGER_NUMBER
          | FLOAT_NUMBER
          | string_literal

variable ::= IDENTIFIER

string_literal ::= "'" STRING_CONTENT? "'"
                 | '"' STRING_CONTENT? '"'
