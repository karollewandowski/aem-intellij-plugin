buildscript {
  ext.kotlin_version = '1.1.51'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
  }
}

plugins {
  id 'org.jetbrains.intellij' version "0.0.39"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

compileKotlin {
  kotlinOptions {
    apiVersion = "1.1"
  }
}
compileTestKotlin {
  kotlinOptions {
    apiVersion = "1.1"
  }
}

sourceSets {
  main {
    java.srcDirs += 'src/main/java'
    java.srcDirs += 'src/main/gen'
    kotlin.srcDirs += 'src/main/kotlin'
    resources.srcDirs += 'src/resources'
  }
  test {
    java.srcDirs += 'test/src'
    resources.srcDirs += 'test/data'
  }
}

intellij {
  version = 'IC-2016.2.5'
  updateSinceUntilBuild = false
  sandboxDirectory = project.rootDir.canonicalPath + "/.sandbox"
}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

project.afterEvaluate {
  def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')
  jacoco {
    toolVersion = "0.7.6.201602180812"
    applyTo junitPlatformTestTask
  }
  project.task(type: JacocoReport, "junitPlatformJacocoReport",
      {
        sourceDirectories = files("./src/main")
        classDirectories = files("$buildDir/classes/main")
        reports {
          xml {
            enabled = true
            destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
          }
          csv.enabled = false
          html.enabled = false
        }
        executionData junitPlatformTestTask
      })
}

idea {
  module {
    generatedSourceDirs += file('gen')
  }
}

repositories {
  mavenCentral()
  jcenter()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  compile "org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5"
  testCompile "org.junit.jupiter:junit-jupiter-api:5.0.1"
  testCompile "org.junit.jupiter:junit-jupiter-params:5.0.1"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.0.1"
  testRuntime "org.junit.vintage:junit-vintage-engine:4.12.1"
  testCompile "org.mockito:mockito-core:2.11.0"
  testCompile 'org.jmockit:jmockit:1.36'
  testCompile "org.assertj:assertj-core:3.8.0"
}

lexerGenerationTask(project)
parserGenerationTask(project)

def lexerGenerationTask(project) {
  return codeGenerationTask(project, tasks.create("generateLexer", JavaExec) {
    def src = "$project.projectDir/src/main/grammars/htl.flex"
    def dst = "$project.projectDir/src/main/gen/co/nums/intellij/aem/htl/lexer/"

    main = 'jflex.Main'
    classpath = files('lib/jflex-1.7.0-SNAPSHOT.jar')

    args = ['--skel', 'lib/idea-flex.skeleton',
            '-d', dst,
            src
    ]

    inputs.file file(src)
    outputs.dir file("$dst/HtlLexer.java")
  })
}

def parserGenerationTask(project) {
  return codeGenerationTask(project, tasks.create("generateParser", JavaExec) {
    def src = "$project.projectDir/src/main/grammars/htl.bnf"
    def dst = "$project.projectDir/src/main/gen/co/nums/intellij/aem/htl/parser/"
    doFirst {
      delete file(dst)
    }

    main = 'org.intellij.grammar.Main'
    classpath(configurations.compile + files('lib/grammar-kit-1.5.0.jar'))

    args = ["$project.projectDir/src/main/gen", file(src)]

    inputs.file file(src)
    outputs.dir dst
  })
}

static codeGenerationTask(project, task) {
  project.compileKotlin.dependsOn task
  project.compileTestKotlin.dependsOn task
  return task
}
