buildscript {
  ext.kotlin_version = '1.1.50'
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

plugins {
  id 'org.jetbrains.intellij' version "0.0.39"
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'jacoco'

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }

sourceSets {
  main {
    java.srcDirs += 'src/main/gen'
    kotlin.srcDirs += 'src/main/kotlin'
    resources.srcDirs += 'src/resources'
  }

  test.java.srcDirs += 'test/src'
  test.resources.srcDirs += 'test/data'
}

intellij {
  version = 'IC-2016.2.5'

  updateSinceUntilBuild = false

  sandboxDirectory = project.rootDir.canonicalPath + "/.sandbox"
}

test {
  testLogging {
    exceptionFormat = 'full'
  }
}

jacocoTestReport {
  reports {
    xml.enabled = true
    csv.enabled = false
    html.enabled = false
  }
}

idea {
  module {
    generatedSourceDirs += file('gen')
  }
}

repositories {
  jcenter()
}

dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  testCompile 'org.mockito:mockito-core:2.2.21'
  testCompile 'org.assertj:assertj-core:3.6.0'
  testCompile 'com.tngtech.java:junit-dataprovider:1.12.0'
}

lexerGenerationTask(project)
parserGenerationTask(project)

def lexerGenerationTask(project) {
  return codeGenerationTask(project, tasks.create("generateLexer", JavaExec) {
    def src = "$project.projectDir/src/main/grammars/htl.flex"
    def dst = "$project.projectDir/src/main/gen/co/nums/intellij/aem/htl/lexer/"

    main = 'jflex.Main'
    classpath = files('lib/jflex-1.7.0-SNAPSHOT.jar')

    args = ['--skel', 'lib/idea-flex.skeleton',
            '-d', dst,
            src
    ]

    inputs.file file(src)
    outputs.dir file("$dst/HtlLexer.java")
  })
}

def parserGenerationTask(project) {
  return codeGenerationTask(project, tasks.create("generateParser", JavaExec) {
    def src = "$project.projectDir/src/main/grammars/htl.bnf"
    def dst = "$project.projectDir/src/main/gen/co/nums/intellij/aem/htl/parser/"
    doFirst {
      delete file(dst)
    }

    main = 'org.intellij.grammar.Main'
    classpath(configurations.compile + files('lib/grammar-kit-1.5.0.jar'))

    args = ["$project.projectDir/src/main/gen", file(src)]

    inputs.file file(src)
    outputs.dir dst
  })
}

static codeGenerationTask(project, task) {
  project.compileKotlin.dependsOn task
  project.compileTestKotlin.dependsOn task
  return task
}
